/*package org.firstinspires.ftc.teamcode.auto;

import static org.firstinspires.ftc.teamcode.hardware.Movement.backward;
import static org.firstinspires.ftc.teamcode.hardware.Movement.position;
import static org.firstinspires.ftc.teamcode.hardware.Movement.slidepos;

import com.acmerobotics.dashboard.config.Config;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;

import org.firstinspires.ftc.teamcode.hardware.FSM_DRIVE;
import org.firstinspires.ftc.teamcode.hardware.Movement;

@Config
@Autonomous
public class FSM_AUTO extends LinearOpMode {
    DcMotor LSL;
    DcMotor LSR;
    DcMotor AM;
    DcMotor FR;
    DcMotor FL;
    DcMotor BR;
    DcMotor BL;
    CRServo GK;
    Servo IR;
    public static int state = 1;
    public static int pos;
    public static int spos;

    public void runOpMode() {
        FL = hardwareMap.get(DcMotor.class, "FL");
        FR = hardwareMap.get(DcMotor.class, "FR");
        BL = hardwareMap.get(DcMotor.class, "BL");
        BR = hardwareMap.get(DcMotor.class, "BR");

        FL.setDirection(DcMotor.Direction.FORWARD);
        FR.setDirection(DcMotor.Direction.REVERSE);
        BL.setDirection(DcMotor.Direction.FORWARD);
        BR.setDirection(DcMotor.Direction.FORWARD);

        FL.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        BL.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        FR.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        BR.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        LSL = hardwareMap.get(DcMotor.class, "LSL");
        LSR = hardwareMap.get(DcMotor.class, "LSR");
        AM = hardwareMap.get(DcMotor.class, "AM");
        GK = hardwareMap.get(CRServo.class, "GK");
        IR = hardwareMap.get(Servo.class, "IR");

        LSL.setDirection(DcMotor.Direction.FORWARD);
        LSR.setDirection(DcMotor.Direction.REVERSE);
        AM.setDirection(DcMotor.Direction.FORWARD);


        LSL.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        LSR.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        AM.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        waitForStart();

        if (state == 1) { //move to bar
            FSM_DRIVE.forward(30, telemetry, BL, BR, FL, FR);
            FSM_DRIVE.LS_up(200, telemetry, LSL, LSR);
            position(telemetry, BL, BR, FL, FR);
            slidepos(telemetry, LSL, LSR);
            if (pos >= 30 && pos <= 40 && 6000 =< spos && spos <= 8000){
                FSM_DRIVE.stop(telemetry, BL, BR, FL, FR, LSL, LSR);
                state = 2;
            }
        }
        if (state == 2) {
            Movement.LS_down(telemetry, LSL, LSR);
            if (500 =< spos && spos <= 1000) {
                state = 3;
            }
        }
        if (state == 3) {
            //claw_open();
            state = 4;
        }
        if (state == 4) {
            backward(15, telemetry, BL, BR, FL, FR);
            if (pos >= 15) {
                state = 5;
            }
        }
        if (state == 5) {
            Movement.right(10, telemetry, BL, BR, FL, FR);
            if (pos >= 10) {
                state = 6;
            }
        }
        if (state == 6) {
            Movement.forward(10, telemetry, BL, BR, FL, FR);
            if (pos >= 10) {
                state = 7;
            }
        }
        if (state == 7) {
            Movement.right(5, telemetry, BL, BR, FL, FR);
            if (pos == 5) {
                state = 8;
            }
        }
        if (state == 8) {
            Movement.backward(25, telemetry, BL, BR, FL, FR);
            if (pos >= 25) {
                state = 9;
            }
        }
        if (state == 8) {
            Movement.backward(25, telemetry, BL, BR, FL, FR);
            if (pos >= 25) {
                state = 9;
            }
        }
    }
}*/
