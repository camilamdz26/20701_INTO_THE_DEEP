package org.firstinspires.ftc.teamcode.teleop;

import static org.firstinspires.ftc.teamcode.hardware.Movement.AM_in;
import static org.firstinspires.ftc.teamcode.hardware.Movement.LS_down;
import static org.firstinspires.ftc.teamcode.hardware.Movement.LS_up;
import static org.firstinspires.ftc.teamcode.hardware.Movement.backward;
import static org.firstinspires.ftc.teamcode.hardware.Movement.forward;
import static org.firstinspires.ftc.teamcode.hardware.Movement.left;
import static org.firstinspires.ftc.teamcode.hardware.Movement.motor_telemetry;
import static org.firstinspires.ftc.teamcode.hardware.Movement.on;
import static org.firstinspires.ftc.teamcode.hardware.Movement.reset_encoders;
import static org.firstinspires.ftc.teamcode.teleop.Movement1.AM_out;
import static org.firstinspires.ftc.teamcode.teleop.Movement1.LS_down;

import com.acmerobotics.dashboard.config.Config;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;

import org.firstinspires.ftc.robotcore.external.Telemetry;
import org.firstinspires.ftc.teamcode.hardware.FSM_DRIVE;
import org.firstinspires.ftc.teamcode.hardware.Movement;

@Config
@Autonomous
public class TEST extends LinearOpMode {
    DcMotor LSL;
    DcMotor LSR;
    DcMotor AM;
    DcMotor FR;
    DcMotor FL;
    DcMotor BR;
    DcMotor BL;
    CRServo GK;
    public boolean yes = true;

    public void runOpMode(){
        LSL = hardwareMap.get(DcMotor.class, "LSL");
        LSR = hardwareMap.get(DcMotor.class, "LSR");
        AM = hardwareMap.get(DcMotor.class, "AM");
        GK = hardwareMap.get(CRServo.class, "GK");

        LSL.setDirection(DcMotor.Direction.FORWARD);
        LSR.setDirection(DcMotorSimple.Direction.REVERSE);
        AM.setDirection(DcMotor.Direction.FORWARD);


        LSL.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        LSR.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        AM.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        FL = hardwareMap.get(DcMotor.class, "FL");
        FR = hardwareMap.get(DcMotor.class,"FR");
        BL = hardwareMap.get(DcMotor.class, "BL");
        BR = hardwareMap.get(DcMotor.class, "BR");

        FR.setDirection(DcMotor.Direction.REVERSE);
        BR.setDirection(DcMotor.Direction.FORWARD);
        BL.setDirection(DcMotor.Direction.FORWARD);
        FL.setDirection(DcMotor.Direction.FORWARD);


        FL.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        BL.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        FR.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        BR.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        waitForStart();
        FSM_DRIVE.forward(10, telemetry, BL, BR, FL, FR);
        FSM_DRIVE.LS_up(1000, telemetry, LSL, LSR);
        FSM_DRIVE.stop(telemetry, BL, BR, FL, FR, LSL, LSR);

    }
}
